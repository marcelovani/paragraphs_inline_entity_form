<?php
/**
 * @file Module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\CloseDialogCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\SetDialogTitleCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_type_build().
 */
function paragraphs_inline_entity_form_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Add forms for Paragraphs without overriding the default forms.
  //$entity_types['paragraph']->setFormClass('paragraphs_inline_entity_add', '\Drupal\paragraphs_inline_entity_form\Form\ParagraphsController:addForm');
//  $entity_types['paragraph']->setFormClass('paragraphs_inline_entity_add', '\Drupal\paragraphs_inline_entity_form\Form\ParagraphsEntityEmbedDialog');
//  $entity_types['paragraph']->setFormClass('paragraphs_inline_entity_edit', '\Drupal\paragraphs_inline_entity_form\Form\ParagraphsForm');
  $entity_types['paragraph']->setFormClass('paragraphs_inline_entity_edit', '\Drupal\paragraphs_inline_entity_form\Form\ParagraphForm');
  $entity_types['paragraph']->setFormClass('paragraphs_inline_entity_modal_edit', '\Drupal\paragraphs_inline_entity_form\Form\ModalParagraphForm');


  //$entity_types['paragraph']->setFormClass('paragraphs_inline_entity_edit', '\Drupal\geysir\Form\GeysirModalParagraphForm');

  syslog(5, 'DDD P Entity type build');
}

/**
 * Implements hook_form_alter().
 */
function paragraphs_inline_entity_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  syslog(5, 'DDD P Form alter id ' . $form_id);

  $route = \Drupal::routeMatch()->getRouteName();
  syslog(5, 'DDD P Route ' . $route);

  if (in_array($route, ['entity_browser.paragraph_items'])) {
    $form['#attached']['library'][] = 'paragraphs_inline_entity_form/dialog';
  }

  /* @var Drupal\Core\Entity\FieldableEntityInterface $entity */
  $formObject = $form_state->getFormObject();

  syslog(5, 'DDD P class ' . get_class($formObject));

//  Drupal\entity_browser\Form\EntityBrowserForm
//  if ($formObject instanceof \Drupal\Core\Entity\EntityFormInterface) {
//    //$form['#attached']['library'][] = 'paragraphs_inline_entity_form/dialog';
//  }
//  if ($formObject instanceof \Drupal\paragraphs_inline_entity_form\Form\ParagraphsForm) {
//    //stop
//    //echo '';
//  }
  if ($formObject instanceof \Drupal\entity_embed\Form\EntityEmbedDialog) {
    $step = paragraphs_inline_entity_form_get_step($form, $form_state);
    $temp_store = \Drupal::service('tempstore.private');

    switch ($step) {
      case 'embed':
        $entity_uuid = $form['attributes']['data-entity-uuid']['#value'];
        $temp_store->get('paragraphs_inline_entity_form')
          ->set('entity_data', $form['attributes']);

        syslog(5, 'DDD stored data for ' . $entity_uuid);

        $form['entity']['#markup'] = $entity_uuid;

        $form_state->set('entity_uuid', $entity_uuid);

        $form['actions']['back'] = [
          '#type' => 'submit',
          '#value' => t('Back'),
          '#submit' => [],
          //@todo add throbber
          '#ajax' => [
            'url' => Url::fromRoute('paragraphs_inline_entity_form.modal.edit_form', [
              'uuid' => $entity_uuid,
            ]),
            'event' => 'click',
          ],
        ];

        //$eurl = '/entity_browser/paragraph/2/edit';
        //entity_browser.edit_form:
        //  path: /entity_browser/{entity_type}/{entity}/edit
        $form['actions']['edit'] = [
          '#type' => 'submit',
          '#value' => t('Edit'),
          '#submit' => [],
          //@todo add throbber
          '#ajax' => [
            'url' => Url::fromRoute('entity_browser.edit_form', [
              'entity_type' => 'paragraph',
              'entity' => '2',
            ]),
            'event' => 'click',
          ],
        ];
        break;

      case 'select':
        break;
    }

    return;
  }
}

/**
 * Gets the current step of entity embed.
 * It also checks that the browser type is a paragraph_item.
 *
 * @param                                      $form array
 *    The form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *    The form state
 *
 * @return $step string
 *    The step
 */
function paragraphs_inline_entity_form_get_step(&$form, FormStateInterface $form_state) {
  $step = NULL;
  if ($form_state->get('step') == 'select'
    && isset($form['entity_browser']['#entity_browser'])
    && isset($form_attributes['data-entity-type'])
    && $form['entity_browser']['#entity_browser'] == 'paragraph_items'
    && $form['attributes']['data-entity-type']['#value'] == 'paragraph') {
    $step = $form_state->get('step');
  }

  return $form_state->get('step');
}

/**
 * Implements hook_preprocess_html().
 *
 * On displaying the iframe hide all page elements except that what is inside.
 */
function paragraphs_inline_entity_form_preprocess_html(&$variables) {
  $route = \Drupal::routeMatch()->getRouteName();
  if (in_array($route, ['paragraphs_inline_entity_form.modal.select_form'])) {
    if (isset($variables['page_top'])) {
      $variables['page_top']['#access'] = FALSE;
    }
    if (isset($variables['page_bottom'])) {
      $variables['page_bottom']['#access'] = FALSE;
    }
    if (isset($variables['page'])) {
      foreach (array_keys($variables['page']) as $key) {
        if (strpos($key, '#') !== 0 && $key !== 'content') {
          $variables['page'][$key]['#access'] = FALSE;
        }
      }
    }
  }
}
